package screen.student.controller;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;
import javafx.scene.control.MenuItem;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.control.TitledPane;
import javafx.scene.control.ToggleGroup;
import javafx.scene.input.ContextMenuEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import model.Activity;
import model.Admin;
import model.Student;

public class StudentController implements Initializable 
{
	private Student student;
	private Admin admin;
	
	public void setAdmin(Admin admin) { this.admin = admin; }
	public void setStudent(Student student) { this.student = student; }
	// TODO: nh·∫≠n t√™n user t·ª´ file json d∆∞·ªõi ƒë√¢y l√† temp
	private String username = new String("Tr·ªãnh Tr·∫ßn Ph∆∞∆°ng Tu·∫•n");
	 
	//
	private ObservableList <Activity> activityListData = FXCollections.observableArrayList();
	 
	// C√°c thu·ªôc t√≠nh FXML
	
	@FXML
    private Button viewActivityPaneButton;
	
	@FXML
    private Button viewRegisterPaneButton;
	
	@FXML
    private Button viewScorePaneButton;
	
	@FXML
    private AnchorPane registerActivityPane;
	
	@FXML
    private AnchorPane viewScorePane;
	
    @FXML
    private AnchorPane Student_controller;
    
    @FXML
    private Button logout_btn;
    
    @FXML
    private RadioButton viewSemester1;

    @FXML
    private RadioButton viewSemester2;

    @FXML
    private RadioButton viewSemester3;

    @FXML
    private RadioButton viewSemester4;
    
    @FXML
    private TitledPane viewSemesterList;

    @FXML
    private AnchorPane paneThanhDieuHuong;

    @FXML
    private TextField searchTextField;

    @FXML
    private ToggleGroup semesterViewActivity;

    @FXML
    private ToggleGroup semesterViewActivity1;

    @FXML
    private Label studentName;
    
    @FXML
    private AnchorPane viewActivityPane;
    
    @FXML
    private GridPane gridPane;
    
    @FXML
    private ScrollPane viewActivityScrollPane;
   
    @FXML
    void activityRegisterButtonClick(MouseEvent event) {
    	
    }

    @FXML
    void exitAppButtonClicked(ContextMenuEvent event) {

    }

    @FXML
    void registerPageButtonClicked(MouseEvent event) {

    }

    @FXML
    void registerSearchButtonClicked(MouseEvent event) {

    }

    @FXML
    void viewActivityPageButtonClicked(MouseEvent event) {

    }

    @FXML
    void viewScorePageButtonClicked(MouseEvent event) {
    	khoiTaoDuLieu();
    	displayScoreCharts();
    }
    @FXML
    private TextField searchField;
    private List<Activity> allActivities;
    @FXML
    private void btnSubmitRegister(ActionEvent event) {
        System.out.println("Register activity button clicked");

        for (javafx.scene.Node node : gridPane.getChildren()) {
            if (node instanceof AnchorPane anchorPane) {
                Object ud = anchorPane.getUserData();
                if (ud instanceof ActivityController ac) {
                    if (ac.isSelected()) {
                        Activity activity = ac.getActivity();
                        if (!student.getRegisteredActivities().contains(activity)) {
                            student.addActivity(activity);    // üü¢ Th√™m v√†o danh s√°ch ƒë√£ ƒëƒÉng k√Ω
                            ac.markAsRegistered();            // ‚úÖ Kh√≥a tick + c·∫≠p nh·∫≠t tr·∫°ng th√°i
                        }
                    }
                }
            }
        }

        System.out.println("T·ªïng s·ªë ho·∫°t ƒë·ªông ƒë√£ ƒëƒÉng k√Ω: " + student.getRegisteredActivities().size());
    }
    // Thu·ªôc t√≠nh alert n√†y d√πng ƒë·ªÉ hi·ªán th√¥ng b√°o th√¥i :))))
    private Alert alert;
    
    
    // StudentController.java
    public void initData(Student loggedStudent) {
        this.student = loggedStudent;
        this.username = loggedStudent.getUserName();

        System.out.println("Admin in controller: " + admin);
        System.out.println("Activities in controller: " + (admin != null ? admin.getAllActivities().size() : "admin is null"));

        displayStudentName();
        allActivities = admin.getAllActivities();
        if (student == null) {
            System.out.println("Student is null in StudentController");
        } else {
            registeredActivityDisplay(allActivities);
            searchField.textProperty().addListener((obs, oldText, newText) -> {
                searchActivities(newText);
            });
        }
    }
    public void searchActivities(String searchText) {
        // L·ªçc theo t√™n ho·∫°t ƒë·ªông, h·ªçc k·ª≥, ti√™u ch√≠ (title), c√≥ th·ªÉ m·ªü r·ªông th√™m
        List<Activity> filtered = allActivities.stream()
            .filter(a -> 
                (a.getTitle() != null && a.getTitle().toLowerCase().contains(searchText.toLowerCase())) ||
                (a.getSemester() != null && a.getSemester().toLowerCase().contains(searchText.toLowerCase())) ||
                (a.getName() != null && a.getName().toLowerCase().contains(searchText.toLowerCase()))
                
                // C√≥ th·ªÉ th√™m ƒëi·ªÅu ki·ªán kh√°c n·∫øu c·∫ßn
            )
            .collect(Collectors.toList());

        // X√≥a c√°c node hi·ªán t·∫°i kh·ªèi gridPane
        gridPane.getChildren().clear();
        // Hi·ªÉn th·ªã l·∫°i c√°c activity ƒë√£ l·ªçc
        registeredActivityDisplay(filtered);
    }
    // Ve bieu do 1
    @FXML
    private void handleSemesterSelection(ActionEvent event) {
        MenuItem selectedItem = (MenuItem) event.getSource();
        String selectedSemester = selectedItem.getText(); // V√≠ d·ª•: "2023.1"
        semesterMenuButton.setText(selectedSemester);     // C·∫≠p nh·∫≠t n√∫t

        updateBarChart(selectedSemester);                 // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
    }
    @FXML
    private BarChart<String, Number> barChart; // ID c·ªßa bar chart trong FXML
    @FXML
    private LineChart<String, Number> lineChart;
    @FXML
    private MenuButton semesterMenuButton;
    @FXML
    private AnchorPane chartSumContainer;
    @FXML
    private AnchorPane chartSemesterContainer;
    private final List<String> semesterOrder = List.of(
    	    "K√¨ 2023.1",
    	    "K√¨ 2023.2",
    	    "K√¨ 2024.1",
    	    "K√¨ 2024.2"
    	);
    private final Map<String, Map<String, Integer>> scoreDataBySemester = new HashMap<>();
    public void displayScoreCharts() {
        lineChart.getData().clear();
        lineChart.setTitle("ƒêi·ªÉm r√®n luy·ªán c√°c h·ªçc k√¨");
        XYChart.Series<String, Number> lineSeries = new XYChart.Series<>();
        lineSeries.setName("T·ªïng ƒëi·ªÉm");
        // Gi·ªõi h·∫°n tr·ª•c Y
        NumberAxis yAxis = (NumberAxis) lineChart.getYAxis();
        yAxis.setAutoRanging(true);
        yAxis.setLowerBound(0);
        yAxis.setUpperBound(100);
        yAxis.setTickUnit(10);
        
        // ƒê·∫£m b·∫£o tr·ª•c X hi·ªÉn th·ªã ƒë√∫ng th·ª© t·ª± v√† ƒë·ªß c√°c k·ª≥
        CategoryAxis xAxis = (CategoryAxis) lineChart.getXAxis();
        xAxis.setCategories(FXCollections.observableArrayList(semesterOrder));
        
        
        for (String semester : semesterOrder) {
            Map<String, Integer> criteria = scoreDataBySemester.get(semester);
            int total = 0;
            if (criteria != null) {
                total = criteria.values().stream().mapToInt(Integer::intValue).sum();
            }
            lineSeries.getData().add(new XYChart.Data<>(semester, total));
        }

        lineChart.getData().add(lineSeries);

        chartSumContainer.getChildren().clear();
        chartSumContainer.getChildren().add(lineChart);
        AnchorPane.setTopAnchor(lineChart, 70.0);
        AnchorPane.setLeftAnchor(lineChart, 10.0);
        AnchorPane.setRightAnchor(lineChart, 10.0); 

        // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì bar cho k·ª≥ ƒë·∫ßu ti√™n
        updateBarChart(semesterMenuButton.getText());
    }

    private void updateBarChart(String selectedSemester) {
        barChart.getData().clear();
        barChart.setTitle("Bi·ªÉu ƒë·ªì ƒëi·ªÉm r√®n luy·ªán");

        XYChart.Series<String, Number> barSeries = new XYChart.Series<>();
        barSeries.setName("ƒêi·ªÉm ti√™u ch√≠");

        Map<String, Integer> criteria = scoreDataBySemester.get(selectedSemester);
        if (criteria != null) {
            for (Map.Entry<String, Integer> entry : criteria.entrySet()) {
                XYChart.Data<String, Number> data = new XYChart.Data<>(entry.getKey(), entry.getValue());
                barSeries.getData().add(data);
            }
        }

        barChart.getData().add(barSeries);

        chartSemesterContainer.getChildren().clear();
        chartSemesterContainer.getChildren().add(barChart);
        AnchorPane.setTopAnchor(barChart, 10.0);
        AnchorPane.setLeftAnchor(barChart, 150.0);
        AnchorPane.setRightAnchor(barChart, 150.0);

        // G√°n m√†u cho t·ª´ng c·ªôt sau khi hi·ªÉn th·ªã
        Platform.runLater(() -> {
            for (int i = 0; i < barSeries.getData().size(); i++) {
                XYChart.Data<String, Number> data = barSeries.getData().get(i);
                final int colorIndex = i % 4;
                if (data.getNode() != null) {
                    data.getNode().setStyle("-fx-bar-fill: " + getColorNameForIndex(colorIndex) + ";");
                }
            }
        });
    }

    private String getColorNameForIndex(int index) {
        String[] colors = {"#FF6F61", "#6B8E23", "#4682B4", "#FFA07A"};
        return colors[index % colors.length];
    }


    // H√†m b√™n d∆∞·ªõi th·ª±c hi·ªán vi·ªác kh·ªüi t·∫°o m·ªói khi student ƒëƒÉng nh·∫≠p
    @Override
    public void initialize (URL location, ResourceBundle resources)
    {
        // Ch·ªâ th·ª±c hi·ªán setup giao di·ªán tƒ©nh, kh√¥ng ph·ª• thu·ªôc d·ªØ li·ªáu
        registerActivityPane.setVisible(true);
        viewActivityPane.setVisible(false);
        viewScorePane.setVisible(false);
    }    
    // H√†ng v√† c·ªôt trong grid
    int row = 0;
    int column = 0;
    
    // Ph∆∞∆°ng th·ª©c n√†y th·ª±c hi·ªán vi·ªác reset l·∫°i datalist v√† th√™m v√†o m·ªçi activity ƒë√£ ƒëƒÉng k√Ω v√¥
    public void registeredActivityDisplay (List<Activity> activities) {
        final String ITEM_FXML_FILE_PATH = "/screen/student/view/ActivityLayout.fxml";

        int column = 0;
        int row = 1;

        try {
            for (Activity activity : activities) {
            	if (!student.getRegisteredActivities().contains(activity) && student != null)	 {
                    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(ITEM_FXML_FILE_PATH));
                    AnchorPane anchorPane = fxmlLoader.load();
                    ActivityController controller = fxmlLoader.getController();
                    controller.setData(activity, student);

                    anchorPane.setUserData(controller);
                    if (column == 3) {
                        column = 0;
                        row++;
                    }

                    gridPane.add(anchorPane, column++, row);
                    GridPane.setMargin(anchorPane, new Insets(20, 10, 10, 10));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    public void switchForm(ActionEvent event) {
        if (event.getSource() == viewRegisterPaneButton) {
            registerActivityPane.setVisible(true);
            viewActivityPane.setVisible(false);
            viewScorePane.setVisible(false);
        } else if (event.getSource() == viewActivityPaneButton) {
            registerActivityPane.setVisible(false);
            viewActivityPane.setVisible(true);
            viewScorePane.setVisible(false);
        } else if (event.getSource() == viewScorePaneButton) {
            registerActivityPane.setVisible(false);
            viewActivityPane.setVisible(false);
            viewScorePane.setVisible(true);
        }
    }
    
    // C·∫£nh b√°o ng∆∞·ªùi ch∆°i khi tho√°t ch∆∞∆°ng tr√¨nh, ƒë·ªìng th·ªùi n·∫øu nh∆∞ m√† student tho√°t th√¨ show l·∫°i c·ª≠a s·ªï login
    public void logout ()
    {
    	try 
    	{
    		alert = new Alert(AlertType.CONFIRMATION);
    		alert.setTitle("Ch√∫ √Ω!!!");
    		alert.setHeaderText(null);
    		alert.setContentText("B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ch∆∞∆°ng tr√¨nh kh√¥ng ?");
    		Optional<ButtonType> option = alert.showAndWait();
    		
    		if (option.get().equals(ButtonType.OK))
    		{
    			// ·∫®n ƒëi student layout
    			logout_btn.getScene().getWindow().hide();
    			
    			// G·ªçi l·∫°i trang ƒëƒÉng nh·∫≠p
    			new view.login.main.Main().setVisible(true);
    		}
    	}
    	catch (Exception e)
    	{
    		e.printStackTrace();
    	}
    }
    
    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ hi·ªÉn th·ªã t√™n sv
    public void displayStudentName ()
    {
    	String student_name = username;
    	student_name = student_name.substring(0, 1).toUpperCase() + student_name.substring(1);
    	studentName.setText(student_name);
    }
    private void khoiTaoDuLieu() {
        scoreDataBySemester.clear(); // D·ªçn d·∫πp d·ªØ li·ªáu c≈©

        List<Activity> activities = student.getRegisteredActivities();

        for (Activity activity : activities) {
            String semester = activity.getSemester();
            String criterion = activity.getTitle(); // Gi·∫£ s·ª≠ ti√™u ch√≠ nh∆∞ "√ù th·ª©c", "H·ªçc t·∫≠p" n·∫±m ·ªü title
            int score = activity.getScore();

            // N·∫øu ch∆∞a c√≥ h·ªçc k·ª≥ n√†y th√¨ kh·ªüi t·∫°o
            scoreDataBySemester.putIfAbsent(semester, new HashMap<>());

            Map<String, Integer> criteriaMap = scoreDataBySemester.get(semester);
            // C·ªông d·ªìn ƒëi·ªÉm cho ti√™u ch√≠
            criteriaMap.put(criterion, criteriaMap.getOrDefault(criterion, 0) + score);
        }

        // G√°n m·∫∑c ƒë·ªãnh h·ªçc k·ª≥ ƒë·∫ßu ti√™n (n·∫øu c√≥)
        if (!scoreDataBySemester.isEmpty()) {
            String firstSemester = scoreDataBySemester.keySet().iterator().next();
            semesterMenuButton.setText(firstSemester);
            updateBarChart(firstSemester); // T·ª± ƒë·ªông hi·ªÉn th·ªã bi·ªÉu ƒë·ªì lu√¥n
        }
    }


}

